# Polymetis

## Usage

### Start the **Controller Manager Server** and **Robot Client**

See instructions in [examples](https://github.com/fair-robotics/fair-robot-envs/tree/master/examples/) to run the server and client. Clients include:

- **Franka Client**: A hardware client designed to work with the Franka Panda arm, implemented as a wrapper around [Libfranka](https://frankaemika.github.io/docs/libfranka.html)
- **Simulation Client**: A simulation client which has the same interface as the hardware client. For details, see documentation in [polysim](polysim-doc).
- **Empty Statistics Client**: A robot client which prints statistics about time taken by RPC calls and always returns joint states of 0s). Can be used to confirm that the Controller Manager Server is running properly and to debug performance issues.

[Hydra](http://hydra.cc/) configuration files can be found in [polymetis/conf/robot_client](https://github.com/fair-robotics/fair-robot-envs/tree/master/polymetis/conf/robot_client).

### Connect a **User Client** to the Controller Manager Server & use it to execute user scripts

The user API is exposed through `RobotInterface`, which is initialized as follows:
```python
from polymetis import RobotInterface

robot = RobotInterface(
    ip_address="localhost",
)
```
`ip_address` is the IP of the Controller Manager Server. Since we're launching it locally in this example, the IP will be `localhost`.

Definitions of available methods can be found [here](https://github.com/fair-robotics/fair-robot-envs/tree/master/polymetis/python/polymetis/robot_interface.py).
Sample user scripts can be found in [examples](https://github.com/fair-robotics/fair-robot-envs/tree/master/examples).

## For Developers

### Developing Locally

Initialize submodules
```bash
git submodule update --init
```

Create a conda env containing dependencies:
```
cd polymetis
conda env create -f environment.yml
conda install polymetis
```

A local build can be performed by
```bash
./install.sh
```
Note that the following environment variables can be exported prior to running the install script:
- `BUILD_FRANKA=OFF`: Build without Libfranka functionalities (for pure simulation)
- `CFG="Release"`: Build in release mode (non-editable python package installation)

Installing through conda would directly give us access to the compiled binary files.
To get the same behavior so that examples work, we will need to include the binary directories into PATH:
```bash
export PATH="$(eval pwd)/build:$PATH"
```

### Rebuilding the Conda Package

The conda package will need to rebuilt for changes in `polymetis` to be applied.

To build the conda package, simply run `conda/build_conda_package.sh`

Note: `conda build` will generate a tar file of the package placed somewhere in the system (shown in stdout). After the package has been built, `build_conda_package.sh` queries the user for the path to the tar file in order to update the custom channel in the repository with the newly built package.